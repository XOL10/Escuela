{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { auth } from \"../firebase\";\nimport { useNavigation } from '@react-navigation/native';\nimport { useEffect } from 'react';\n\nvar LoginScreen = function LoginScreen() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var navigation = useNavigation();\n  useEffect(function () {\n    var unsubscribe = auth.onAuthStateChanged(function (user) {\n      if (user) {\n        navigation.replace(\"Home\");\n      }\n    });\n    return unsubscribe;\n  }, []);\n\n  var handleSignUp = function handleSignUp() {\n    auth.createUserWithEmailAndPassword(email, password).then(function (userCredentials) {\n      var user = userCredentials.user;\n      console.log(user.email);\n    }).catch(function (error) {\n      return alert(error.message);\n    });\n  };\n\n  var handleLogin = function handleLogin() {\n    auth.signInWithEmailAndPassword(email, password).then(function (userCredentials) {\n      var user = userCredentials.user;\n      console.log(user.email);\n    }).catch(function (error) {\n      return alert(error.message);\n    });\n  };\n\n  return React.createElement(KeyboardAvoidingView, {\n    style: styles.container,\n    behavior: \"\"\n  }, React.createElement(View, {\n    style: styles.inputContainer\n  }, React.createElement(TextInput, {\n    placeholder: \"Email\",\n    value: email,\n    onChangeText: function onChangeText(text) {\n      return setEmail(text);\n    },\n    style: styles.input\n  })), React.createElement(View, {\n    style: styles.inputContainer\n  }, React.createElement(TextInput, {\n    placeholder: \"Password\",\n    value: password,\n    onChangeText: function onChangeText(text) {\n      return setPassword(text);\n    },\n    style: styles.input,\n    secureTextEntry: true\n  })), React.createElement(View, {\n    style: styles.buttonContainer\n  }, React.createElement(TouchableOpacity, {\n    onPress: handleLogin,\n    style: styles.button\n  }, React.createElement(Text, {\n    style: styles.buttonText\n  }, \"Login\")), React.createElement(TouchableOpacity, {\n    onPress: handleSignUp,\n    style: [styles.button, styles.buttonOutLine]\n  }, React.createElement(Text, {\n    style: styles.buttonOutLineText\n  }, \"Register\"))));\n};\n\nexport default LoginScreen;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  inputContainer: {\n    width: '80%'\n  },\n  input: {\n    backgroundColor: 'white',\n    paddingHorizontal: 15,\n    paddingVertical: 10,\n    borderRadius: 10,\n    marginTop: 5\n  },\n  buttonContainer: {\n    width: '60%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 40\n  },\n  button: {\n    backgroundColor: '#277BDD',\n    width: '100%',\n    padding: 15,\n    borderRadius: 10,\n    alignItems: 'center'\n  },\n  buttonOutLine: {\n    backgroundColor: 'white',\n    marginTop: 5,\n    borderColor: '#277BDD',\n    borderWidth: 2\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: '700',\n    fontSize: 16\n  },\n  buttonOutLineText: {\n    color: '#277BDD',\n    fontWeight: '700',\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["/Users/juanpablo/Documents/Dev/React/School/FirebaseAuth/screens/LoginScreen.js"],"names":["React","useState","auth","useNavigation","useEffect","LoginScreen","email","setEmail","password","setPassword","navigation","unsubscribe","onAuthStateChanged","user","replace","handleSignUp","createUserWithEmailAndPassword","then","userCredentials","console","log","catch","error","alert","message","handleLogin","signInWithEmailAndPassword","styles","container","inputContainer","text","input","buttonContainer","button","buttonText","buttonOutLine","buttonOutLineText","StyleSheet","create","flex","justifyContent","alignItems","width","backgroundColor","paddingHorizontal","paddingVertical","borderRadius","marginTop","padding","borderColor","borderWidth","color","fontWeight","fontSize"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { KeyboardAvoidingView, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native'\nimport { auth } from '../firebase'\nimport { useNavigation } from '@react-navigation/native';\nimport { useEffect } from 'react';\n\n\nconst LoginScreen = () => {\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    const navigation = useNavigation()\n\n    useEffect(() => {\n        const unsubscribe = auth.onAuthStateChanged(user => {\n            if (user){\n                navigation.replace(\"Home\")\n            }\n        })\n\n        return unsubscribe;\n    }, [])\n\n    const handleSignUp = () => {\n       auth.createUserWithEmailAndPassword(email, password).then(userCredentials => {\n            const user = userCredentials.user;\n            console.log(user.email);\n        }).catch(error => alert(error.message))\n    }\n\n    const handleLogin = () => {\n        auth.signInWithEmailAndPassword(email, password).then(userCredentials => {\n            const user = userCredentials.user;\n            console.log(user.email);\n        }).catch(error => alert(error.message))\n    }\n\n    return (\n        <KeyboardAvoidingView\n            style={styles.container}\n            behavior=\"\"\n        >\n            <View style={styles.inputContainer}>\n                <TextInput \n                placeholder=\"Email\"\n                value={email}\n                onChangeText={text => setEmail(text)}\n                style={styles.input}\n                />\n            </View>\n            <View style={styles.inputContainer}>\n                <TextInput \n                placeholder=\"Password\"\n                value={password}\n                onChangeText={text => setPassword(text)}\n                style={styles.input}\n                secureTextEntry\n                />\n            </View>\n            <View style={styles.buttonContainer}>\n                <TouchableOpacity\n                    onPress={handleLogin}\n                    style={styles.button}\n                >\n                    <Text style={styles.buttonText}>Login</Text>\n                </TouchableOpacity>\n                <TouchableOpacity\n                    onPress={handleSignUp}\n                    style={[styles.button, styles.buttonOutLine]}\n                >\n                    <Text style={styles.buttonOutLineText}>Register</Text>\n                </TouchableOpacity>\n            </View>\n        </KeyboardAvoidingView>\n    )\n}\n\nexport default LoginScreen\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    inputContainer: {\n        width: '80%'\n    },\n    input: {\n        backgroundColor: 'white',\n        paddingHorizontal: 15,\n        paddingVertical: 10,\n        borderRadius: 10,\n        marginTop: 5, \n    },\n    buttonContainer: {\n        width: '60%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginTop: 40,\n    },\n    button: {\n        backgroundColor: '#277BDD',\n        width: '100%',\n        padding: 15,\n        borderRadius: 10,\n        alignItems: 'center',\n    },\n    buttonOutLine: {\n        backgroundColor: 'white',\n        marginTop:5,\n        borderColor: '#277BDD',\n        borderWidth: 2,\n    },\n    buttonText: {\n        color: 'white',\n        fontWeight: '700',\n        fontSize: 16,\n    },\n    buttonOutLineText: {\n        color: '#277BDD',\n        fontWeight: '700',\n        fontSize: 16,\n    },\n})\n"]},"metadata":{},"sourceType":"module"}